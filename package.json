{
  "name": "async-fetch",
  "version": "0.1.0",
  "dependencies": {
    "@babel/register": "^7.10.5",
    "@testing-library/jest-dom": "^4.2.4",
    "@testing-library/react": "^9.3.2",
    "@testing-library/user-event": "^7.1.2",
    "@types/jest": "^24.0.0",
    "@types/node": "^12.0.0",
    "@types/react": "^16.9.0",
    "@types/react-dom": "^16.9.0",
    "react": "^16.13.1",
    "react-dom": "^16.13.1",
    "react-scripts": "3.4.2",
    "typescript": "~3.7.2"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": "react-app"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "description": "A wrap around the \"Fetch\" API and react hooks to asynchronous api calls. It makes use of useState, useEffect, useCallback. While the asynchronous call is going on, you have access to its state (pending or done) and value (or error) once it is done. This affords you the opportunity to conditionally render components or elements.",
  "main": "Index.ts",
  "devDependencies": {},
  "repository": {
    "type": "git",
    "url": "git+https://github.com/lere01/async-fetch.git"
  },
  "keywords": [
    "asynchronous",
    "api",
    "calls",
    "useCallback",
    "useState",
    "useEffect",
    "react"
  ],
  "author": "Faith O",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/lere01/async-fetch/issues"
  },
  "homepage": "https://github.com/lere01/async-fetch#readme"
}
